[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Display Epic/Exotic name in rarity
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if AUT.card_type == 'Joker' or (AUT.badges and AUT.badges.force_rarity) then card_type = ({localize('k_common'), localize('k_uncommon'), localize('k_rare'), localize('k_legendary')})[card.config.center.rarity] end"
position = "at"
payload = "if AUT.card_type == 'Joker' or (AUT.badges and AUT.badges.force_rarity) then card_type = ({localize('k_common'), localize('k_uncommon'), localize('k_rare'), localize('k_legendary'), ['cry_epic'] = 'Epic', ['cry_exotic'] = 'Exotic'})[card.config.center.rarity] end"
match_indent = true


# Fix Rare Tag creating Epic jokers
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "card = create_card('Joker', _context.area, nil, 1, nil, nil, nil, 'rta')"
position = "at"
payload = "card = create_card('Joker', _context.area, nil, 0.99, nil, nil, nil, 'rta')"
match_indent = true


# Localization color
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "legendary = G.C.RARITY[4],"
position = "after"
payload = "cry_exotic = G.C.RARITY['cry_exotic'], cry_epic = G.C.RARITY['cry_epic'], cry_azure = HEX('1d4fd7'), cry_code = G.C.SET.Code, heart = G.C.SUITS.Hearts, diamond = G.C.SUITS.Diamonds, spade = G.C.SUITS.Spades, club = G.C.SUITS.Clubs,"
match_indent = true


# Draw midground layer
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.config.center.soul_pos and (self.config.center.discovered or self.bypass_discovery_center) then"
position = "after"
payload = '''
if self.config.center.soul_pos and self.config.center.soul_pos.extra and (self.config.center.discovered or self.bypass_discovery_center) then
    local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
    local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
    self.children.floating_sprite2:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
    self.children.floating_sprite2:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod) 
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if k ~= 'focused_ui' and k ~= "front" and k ~= "back" and k ~= "soul_parts" and k ~= "center" and k ~= 'floating_sprite' and k~= "shadow" and k~= "use_button" and k ~= 'buy_button' and k ~= 'buy_and_use_button' and k~= "debuff" and k ~= 'price' and k~= 'particles' and k ~= 'h_popup' then v:draw() end'''
position = "at"
payload = '''if k ~= 'focused_ui' and k ~= "front" and k ~= "back" and k ~= "soul_parts" and k ~= "center" and k ~= 'floating_sprite' and k ~= 'floating_sprite2' and k~= "shadow" and k~= "use_button" and k ~= 'buy_button' and k ~= 'buy_and_use_button' and k~= "debuff" and k ~= 'price' and k~= 'particles' and k ~= 'h_popup' then v:draw() end'''
match_indent = true


# Custom variables in info queue
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "function generate_card_ui(_c, full_UI_table, specific_vars, card_type, badges, hide_desc, main_start, main_end)"
position = "after"
payload = "if _c.specific_vars then specific_vars = _c.specific_vars end"
match_indent = true

# Fix not all cards returning to hand on big hands
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "{card_limit = 500, type = 'discard'})"
position = "at"
payload = "{card_limit = 1e308, type = 'discard'})"
match_indent = true

# Max out hand size at deck size
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "self.config.real_card_limit = (self.config.real_card_limit or self.config.card_limit) + delta"
position = "at"
payload = '''
self.config.realer_card_limit = (self.config.realer_card_limit or self.config.real_card_limit or self.config.card_limit) + delta
self.config.real_card_limit = self ~= G.hand and self.config.realer_card_limit or math.min((G.deck and G.deck.config.card_limit or 52), self.config.realer_card_limit)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "self.config.card_limit = math.max(0, self.config.real_card_limit)"
position = "at"
payload = "self.config.card_limit = math.max(0, self.config.real_card_limit)"
match_indent = true

# Crash fix
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if not G.SAVED_GAME.VERSION or G.SAVED_GAME.VERSION < '0.9.2' then"
position = "at"
payload = "if not G.SAVED_GAME or not G.SAVED_GAME.VERSION or G.SAVED_GAME.VERSION < '0.9.2' then"
match_indent = true

# New perishable texture
# Quartz Stake - register pinned sticker
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "set_profile_progress()"
position = "before"
payload = '''
if self.ASSET_ATLAS['cry_sticker'] then
    self.shared_sticker_perishable = Sprite(0, 0, self.CARD_W, self.CARD_H, self.ASSET_ATLAS["cry_sticker"], {x = 4,y = 4})
    self.shared_stickers['pinned'] = Sprite(0, 0, self.CARD_W, self.CARD_H, self.ASSET_ATLAS['cry_sticker'], {x=5, y=0})
end
for i = 1, #G.CHALLENGES do
    if (G.CHALLENGES[i].id == 'c_cry_rush_hour' or G.CHALLENGES[i].id == 'c_cry_rush_hour_ii' or G.CHALLENGES[i].id == 'c_cry_rush_hour_iii') and #G.CHALLENGES[i].restrictions.banned_other == 0 then
        for k, v in pairs(G.P_BLINDS) do
            if k ~= "bl_cry_clock" and k ~= "bl_cry_lavender_loop" and v.boss then
                G.CHALLENGES[i].restrictions.banned_other[#G.CHALLENGES[i].restrictions.banned_other+1] = {id = k, type = 'blind'}
            end
        end
    end
end
'''
match_indent = true

# Apply booster pack edition and stickers to contents - by Jen Walter
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "card.T.x = self.T.x"
position = "before"
payload = '''

local edi = self.edition or {}
if edi.type then
	card:set_edition({[edi.type] = true})
end

if self.ability.eternal then
	card.ability.eternal = self.ability.eternal
end
if self.ability.perishable then
	card.ability.perishable = self.ability.perishable
end
if self.ability.rental then
	card.ability.rental = self.ability.rental
end
if self.pinned then
	card.pinned = self.pinned
end

'''
match_indent = true

# Prevent Jokers from spitting empty messages
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "text = extra.message or text"
position = "after"
payload = "if not text or text == '' then return end"
match_indent = true

# Sound Manager Injection
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.SOUND_MANAGER.thread:start(1)"
position = "at"
payload = '''
--Based on Djynasty's MusicMod
lovely = require('lovely')
nativefs = require('nativefs')
function initSoundManager()
    Mod = {}
    Mod.NAME = "Cryptid"
	local full_path = lovely.mod_dir .. "/".. Mod.NAME .. "/sound_manager.lua"
    local file_data = assert(nativefs.newFileData(full_path), ("Failed to collect file data for sound_manager"))
	SOUND_MANAGER = {
		thread = love.thread.newThread(file_data),
		channel = love.thread.getChannel("sound_request"),
		load_channel = love.thread.getChannel("load_channel"),
	}
    Mod.DIR = lovely.mod_dir
	print(Mod.DIR.."/"..Mod.NAME)
	SOUND_MANAGER.thread:start(Mod.DIR.."/"..Mod.NAME)
	return SOUND_MANAGER
end
self.SOUND_MANAGER = initSoundManager()
'''
match_indent = true
overwrite = true